// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/school.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GetSchool_GetSchool_FullMethodName    = "/pb.GetSchool/GetSchool"
	GetSchool_GetStudents_FullMethodName  = "/pb.GetSchool/GetStudents"
	GetSchool_SendStudents_FullMethodName = "/pb.GetSchool/SendStudents"
)

// GetSchoolClient is the client API for GetSchool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetSchoolClient interface {
	GetSchool(ctx context.Context, in *GetSchoolRequest, opts ...grpc.CallOption) (*GetSchoolResponse, error)
	GetStudents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GetSchool_GetStudentsClient, error)
	SendStudents(ctx context.Context, opts ...grpc.CallOption) (GetSchool_SendStudentsClient, error)
}

type getSchoolClient struct {
	cc grpc.ClientConnInterface
}

func NewGetSchoolClient(cc grpc.ClientConnInterface) GetSchoolClient {
	return &getSchoolClient{cc}
}

func (c *getSchoolClient) GetSchool(ctx context.Context, in *GetSchoolRequest, opts ...grpc.CallOption) (*GetSchoolResponse, error) {
	out := new(GetSchoolResponse)
	err := c.cc.Invoke(ctx, GetSchool_GetSchool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getSchoolClient) GetStudents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GetSchool_GetStudentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GetSchool_ServiceDesc.Streams[0], GetSchool_GetStudents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &getSchoolGetStudentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetSchool_GetStudentsClient interface {
	Recv() (*Student, error)
	grpc.ClientStream
}

type getSchoolGetStudentsClient struct {
	grpc.ClientStream
}

func (x *getSchoolGetStudentsClient) Recv() (*Student, error) {
	m := new(Student)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getSchoolClient) SendStudents(ctx context.Context, opts ...grpc.CallOption) (GetSchool_SendStudentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GetSchool_ServiceDesc.Streams[1], GetSchool_SendStudents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &getSchoolSendStudentsClient{stream}
	return x, nil
}

type GetSchool_SendStudentsClient interface {
	Send(*Student) error
	CloseAndRecv() (*WebResponse, error)
	grpc.ClientStream
}

type getSchoolSendStudentsClient struct {
	grpc.ClientStream
}

func (x *getSchoolSendStudentsClient) Send(m *Student) error {
	return x.ClientStream.SendMsg(m)
}

func (x *getSchoolSendStudentsClient) CloseAndRecv() (*WebResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WebResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetSchoolServer is the server API for GetSchool service.
// All implementations must embed UnimplementedGetSchoolServer
// for forward compatibility
type GetSchoolServer interface {
	GetSchool(context.Context, *GetSchoolRequest) (*GetSchoolResponse, error)
	GetStudents(*emptypb.Empty, GetSchool_GetStudentsServer) error
	SendStudents(GetSchool_SendStudentsServer) error
	mustEmbedUnimplementedGetSchoolServer()
}

// UnimplementedGetSchoolServer must be embedded to have forward compatible implementations.
type UnimplementedGetSchoolServer struct {
}

func (UnimplementedGetSchoolServer) GetSchool(context.Context, *GetSchoolRequest) (*GetSchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchool not implemented")
}
func (UnimplementedGetSchoolServer) GetStudents(*emptypb.Empty, GetSchool_GetStudentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedGetSchoolServer) SendStudents(GetSchool_SendStudentsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStudents not implemented")
}
func (UnimplementedGetSchoolServer) mustEmbedUnimplementedGetSchoolServer() {}

// UnsafeGetSchoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetSchoolServer will
// result in compilation errors.
type UnsafeGetSchoolServer interface {
	mustEmbedUnimplementedGetSchoolServer()
}

func RegisterGetSchoolServer(s grpc.ServiceRegistrar, srv GetSchoolServer) {
	s.RegisterService(&GetSchool_ServiceDesc, srv)
}

func _GetSchool_GetSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSchoolServer).GetSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetSchool_GetSchool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSchoolServer).GetSchool(ctx, req.(*GetSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetSchool_GetStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetSchoolServer).GetStudents(m, &getSchoolGetStudentsServer{stream})
}

type GetSchool_GetStudentsServer interface {
	Send(*Student) error
	grpc.ServerStream
}

type getSchoolGetStudentsServer struct {
	grpc.ServerStream
}

func (x *getSchoolGetStudentsServer) Send(m *Student) error {
	return x.ServerStream.SendMsg(m)
}

func _GetSchool_SendStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GetSchoolServer).SendStudents(&getSchoolSendStudentsServer{stream})
}

type GetSchool_SendStudentsServer interface {
	SendAndClose(*WebResponse) error
	Recv() (*Student, error)
	grpc.ServerStream
}

type getSchoolSendStudentsServer struct {
	grpc.ServerStream
}

func (x *getSchoolSendStudentsServer) SendAndClose(m *WebResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *getSchoolSendStudentsServer) Recv() (*Student, error) {
	m := new(Student)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetSchool_ServiceDesc is the grpc.ServiceDesc for GetSchool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetSchool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GetSchool",
	HandlerType: (*GetSchoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchool",
			Handler:    _GetSchool_GetSchool_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStudents",
			Handler:       _GetSchool_GetStudents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendStudents",
			Handler:       _GetSchool_SendStudents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/school.proto",
}
